-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
--
--
-- PostGIS - Spatial Types for PostgreSQL
-- http://postgis.net
--
-- Copyright (C) 2024 Sandro Santilli <strk@kbt.io>
--
-- This is free software; you can redistribute and/or modify it under
-- the terms of the GNU General Public Licence. See the COPYING file.
--
-- Author: Sandro Santilli <strk@kbt.io>
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/* #define POSTGIS_TOPOLOGY_DEBUG 1 */

--{
--  DropTopologyForeignKeyConstraints(name)
--
--  Drop foreign key constraints on topology primitive tables
--
--  Availability: 3.5.0
--
CREATE OR REPLACE FUNCTION topology.DropTopologyForeignKeyConstraints(atopology varchar)
RETURNS void
AS
$BODY$
DECLARE
  sql TEXT;
BEGIN


  sql := format(
    $$
      ALTER TABLE %1$I.node DROP CONSTRAINT IF EXISTS face_exists;
      ALTER TABLE %1$I.edge_data DROP CONSTRAINT IF EXISTS start_node_exists;
      ALTER TABLE %1$I.edge_data DROP CONSTRAINT IF EXISTS end_node_exists;
      ALTER TABLE %1$I.edge_data DROP CONSTRAINT IF EXISTS left_face_exists;
      ALTER TABLE %1$I.edge_data DROP CONSTRAINT IF EXISTS right_face_exists;
      ALTER TABLE %1$I.edge_data DROP CONSTRAINT IF EXISTS next_left_edge_exists;
      ALTER TABLE %1$I.edge_data DROP CONSTRAINT IF EXISTS next_right_edge_exists;
    $$,
    atopology   -- %1
  );

#ifdef POSTGIS_TOPOLOGY_DEBUG
  RAISE DEBUG 'SQL: %', sql;
#endif
  EXECUTE sql;
END
$BODY$
LANGUAGE 'plpgsql' VOLATILE STRICT;

-- DropTopologyForeignKeyConstraints --}

--{
--
--  AddTopologyForeignKeyConstraints(name)
--
--  Add foreign key constraints on topology primitive tables
--
--  Availability: 3.5.0
--
CREATE OR REPLACE FUNCTION topology.AddTopologyForeignKeyConstraints(atopology varchar)
RETURNS void
AS
$BODY$
DECLARE
  sql TEXT;
BEGIN

  PERFORM topology.DropTopologyForeignKeyConstraints(atopology);

  sql := format(
    $$
      ALTER TABLE %1$I.node ADD CONSTRAINT face_exists
        FOREIGN KEY (containing_face)
        REFERENCES %1$I.face (face_id)
        DEFERRABLE INITIALLY DEFERRED;

      ALTER TABLE %1$I.edge_data ADD CONSTRAINT start_node_exists
        FOREIGN KEY (start_node)
        REFERENCES %1$I.node (node_id)
        DEFERRABLE INITIALLY DEFERRED;

      ALTER TABLE %1$I.edge_data ADD CONSTRAINT end_node_exists
        FOREIGN KEY (end_node)
        REFERENCES %1$I.node (node_id)
        DEFERRABLE INITIALLY DEFERRED;

      ALTER TABLE %1$I.edge_data ADD CONSTRAINT left_face_exists
        FOREIGN KEY (left_face)
        REFERENCES %1$I.face (face_id)
        DEFERRABLE INITIALLY DEFERRED;

      ALTER TABLE %1$I.edge_data ADD CONSTRAINT right_face_exists
        FOREIGN KEY (right_face)
        REFERENCES %1$I.face (face_id)
        DEFERRABLE INITIALLY DEFERRED;

      ALTER TABLE %1$I.edge_data ADD CONSTRAINT next_left_edge_exists
        FOREIGN KEY (abs_next_left_edge)
        REFERENCES %1$I.edge_data (edge_id)
        DEFERRABLE INITIALLY DEFERRED;

      ALTER TABLE %1$I.edge_data ADD CONSTRAINT next_right_edge_exists
        FOREIGN KEY (abs_next_right_edge)
        REFERENCES %1$I.edge_data (edge_id)
        DEFERRABLE INITIALLY DEFERRED;
    $$,
    atopology   -- %1
  );
#ifdef POSTGIS_TOPOLOGY_DEBUG
  RAISE DEBUG 'SQL: %', sql;
#endif
  EXECUTE sql;
END
$BODY$
LANGUAGE 'plpgsql' VOLATILE STRICT;

-- AddTopologyForeignKeyConstraints(name)  --}

